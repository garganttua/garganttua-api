# Indicates to the Spring Crudify Dynamic Domain Engine the packages where to search for entities
com.garganttua.api.engine.scanPackages=com.garganttua

# Give access to data of all tenants for users that belongs to that tenant 
com.garganttua.api.superTenantId=0

# Give access to data of all owners
com.garganttua.api.magicOwnerId=0

# Enables the Spring Domain Crudify built-in security environment.
# Passing this option is not enough to disable Spring Security as it just indicates that your API will implements its own security layer and will not use the Spring Domain Crudify built-in one. 
# You should use @SpringBootApplication(exclude = SecurityAutoConfiguration.class) when declaring your Spring Boot Application in order to completely disable Security. 
com.garganttua.api.security=enabled

com.garganttua.api.security.cors.enabled=true

com.garganttua.api.security.csrf.enabled=true

# This option activate the authentication Rest endpoint.
com.garganttua.api.security.authentication=enabled

# This option indicates where the credentials are held (only mode login/password available):
#  - entity : you have defined an entity with @GGAPIAuthenticator annotation and implementing the appropriate interface regarding the chosen authentication type
#  - dao : login/password are stored in database. You should implement :
#     - the data access object which is DB dependant 
com.garganttua.api.security.authentication.type=entity

# The authentication mode :
#  - loginpassword : authentication based on login password
com.garganttua.api.security.authentication.mode=loginpassword

# The hash algorithm used to encode the password in the database.
#  - bcrypt
com.garganttua.api.security.authentication.password.encoder=bcrypt

# Indicates the kind of authorization the user must use to access Rest Endpoints
#  - token : the user should insert an access token in the Http request 
com.garganttua.api.security.authorization=token

# Type of token
#  - jwt
com.garganttua.api.security.authorization.tokens.type=jwt

# Storing token strategy : 
#  - none : tokens are not stored
#  - inmemory : tokens are stored in RAM (in a map) (NOT IMPLEMENTED)
#  - db : tokens are stored in a database : the data access object must be implemented and provided as a java spring bean
#  - mongo : offers a built-in solution to store tokens in mongo db, a Bean of type MongoTemplate must be provided. Tokens are considered as entities as others and the 
#     garganttua api framework will store the tokens regarding the tenant id provided. Rest services are all available
#     (except the ones for create and for update (PATCH)) with access restricted to tenant and authorities. 
com.garganttua.api.security.authorization.tokens.provider=mongo

# Enable a built-in key manager
com.garganttua.api.security.key.manager=enabled

# Key Manager storing 
#  - inmemory : keys are destroyed after reboot
#  - db : keys are stored in a custom database (you must provide the database access by implementing the IGGAPIDBKeyKeeper and by annotating it with @Repository)
#  - keystore (NOT IMPLEMENTED)
#  - custom : custom key manager, you must provide a bean of type IGGAPIKeyManager
#  - mongo : offers a built-in solution to store keys in mongo db, a Bean of type MongoTemplate must be provided. Keys are considered as entities as others and the 
#     garganttua api framework will store its own keys with super tenant id defined in com.garganttua.api.superTenantId parameter. Rest services are all available
#     (except the one for update (PATCH)) with access restricted to tenant and authorities. A "renew" rest service is also available (see swagger file). Keys are not 
#     displayed through the rest services
com.garganttua.api.security.key.manager.type=mongo

# Algorithm used to sign and verify the jwt token
#  - HS256 hmac with sha256
com.garganttua.api.security.authorization.tokens.jwt.key.algorithm=HS512

# JWT signing key realm managed by the key manager
com.garganttua.api.security.authorization.tokens.jwt.key.realm=jwtTokenKey

#indicates if the key realm should be created or not if not existing
com.garganttua.api.security.authorization.tokens.jwt.key.realm.create=true

# Indicate how the jwt token keys are renewed :
#  - auto : the token manager renew automatically the signing key (NOT IMPLEMENTED)
#  - ws :  the token manager exposes a Rest Endpoint to trigger a signing key renewal action (NOT IMPLEMENTED)
#  - none : the token manager does not renew the token signing key. It is recommended to set the key lifetime to 0 with this parameter
com.garganttua.api.security.authorization.tokens.jwt.key.renewal=none

# Indicates to the token manager the token signing key life time. The signing key expired once the life time is reached. 0 for infinite lifetime.
com.garganttua.api.security.authorization.tokens.jwt.key.lifetime=0

# Token signing key life time unit
com.garganttua.api.security.authorization.tokens.jwt.key.lifetime.unit=SECONDS

# Token lifetime in minutes. The delivered tokens expire when lifetime is reached. 0 for infinite lifetime.
# This time is Minutes 
com.garganttua.api.security.authorization.tokens.lifetime=100

# Exposes a Rest endpoint to allow users to refresh/renew their access access tokens (NOT IMPLEMENTED)
com.garganttua.api.security.authorization.tokens.renewal=enabled

# Expose the roles and rights list through an http rest endpoint
com.garganttua.api.security.exposeAuthorizations=enabled

# Indicates the request header name that contains the tenantId info
com.garganttua.api.security.tenantIdHeaderName=tenantId

# Indicates the request header name that contains the ownerId info
com.garganttua.api.security.ownerIdHeaderName=ownerId
